"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const actions_1 = require("../actions");
const { createAsyncAction, createSimpleAction } = actions_1.default;
// actions.createSimpleAction
describe('Create Simple Action', () => {
    let simpleNone;
    let simpleString;
    let simpleNumber;
    let simpleObject;
    beforeEach(() => {
        simpleNone = createSimpleAction('TOGGLE');
        simpleString = createSimpleAction('CREATE');
        simpleNumber = createSimpleAction('NUMBER');
        simpleObject = createSimpleAction('OBJECT');
    });
    it('should create simple action', () => {
        expect(simpleNone()).toEqual({ type: 'TOGGLE' });
        expect(simpleString('A')).toEqual({ type: 'CREATE', request: 'A' });
        expect(simpleNumber(10)).toEqual({ type: 'NUMBER', request: 10 });
        expect(simpleObject({ 'test': 'test' })).toEqual({ type: 'OBJECT', request: { 'test': 'test' } });
    });
});
describe('Create Async Action: SUCCESS', () => {
    let api = jest.fn(() => Promise.resolve());
    let dispatch = jest.fn();
    let asyncString = createAsyncAction('CREATE', api);
    beforeEach(() => {
        asyncString()(dispatch);
    });
    it('should create async action', () => {
        expect(api).toHaveBeenCalled();
        expect(dispatch.mock.calls.length).toEqual(2);
        expect(dispatch.mock.calls[0]).toEqual([{ 'request': undefined, 'status': 'STARTED', 'type': 'CREATE' }]);
        expect(dispatch.mock.calls[1]).toEqual([{ 'request': undefined, 'status': 'SUCCESS', 'type': 'CREATE' }]);
    });
});
describe('Create Async Action: FAILURE', () => {
    const error = { error: 'Error' };
    let api = jest.fn(() => Promise.reject(error));
    let dispatch = jest.fn();
    let asyncString = createAsyncAction('CREATE', api);
    beforeEach(() => {
        asyncString()(dispatch);
    });
    it('should create async action', () => {
        expect(api).toHaveBeenCalled();
        expect(dispatch.mock.calls.length).toEqual(2);
        expect(dispatch.mock.calls[0]).toEqual([{ 'request': undefined, 'status': 'STARTED', 'type': 'CREATE' }]);
        expect(dispatch.mock.calls[1]).toEqual([{ 'request': undefined, 'status': 'FAILURE', 'type': 'CREATE', 'error': error }]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5zcGVjLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy92aXN3YW5hai9Xb3JrL1JuRC9yZWR1eC1hc3luYy1hY3Rpb24tcmVkdWNlci9saWIvIiwic291cmNlcyI6WyJ0ZXN0cy9hY3Rpb25zLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBZ0M7QUFHaEMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLEdBQUcsaUJBQU8sQ0FBQTtBQUV6RCw2QkFBNkI7QUFDN0IsUUFBUSxDQUFDLHNCQUFzQixFQUFFO0lBQ2hDLElBQUksVUFBMEQsQ0FBQTtJQUM5RCxJQUFJLFlBQXlELENBQUE7SUFDN0QsSUFBSSxZQUF5RCxDQUFBO0lBQzdELElBQUksWUFBeUQsQ0FBQTtJQUM3RCxVQUFVLENBQUM7UUFDVixVQUFVLEdBQUcsa0JBQWtCLENBQW9CLFFBQVEsQ0FBQyxDQUFBO1FBQzVELFlBQVksR0FBRyxrQkFBa0IsQ0FBaUIsUUFBUSxDQUFDLENBQUE7UUFDM0QsWUFBWSxHQUFHLGtCQUFrQixDQUFpQixRQUFRLENBQUMsQ0FBQTtRQUMzRCxZQUFZLEdBQUcsa0JBQWtCLENBQWlCLFFBQVEsQ0FBQyxDQUFBO0lBQzVELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDZCQUE2QixFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQ2hELE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO1FBQ25FLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUs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